document.addEventListener("DOMContentLoaded", function () {
    const prestationSelect = document.getElementById("prestation");
    const dateInput = document.getElementById("date");
    const horaireSelect = document.getElementById("horaire");

    prestationSelect.addEventListener("change", updateDisponibilites);
    dateInput.addEventListener("change", updateDisponibilites);
});

const csvLinks = {
    disponibilites: "https://docs.google.com/spreadsheets/d/e/2PACX-1vRglKoc6L2ExSYRDD9H0exyRChQeDsGi-VXPY9s5_Pel-4HrzWFOA9SXyX4VQKFnNUlOIxRF8EBkW_j/pub?output=csv",
    rdv: "https://docs.google.com/spreadsheets/d/e/2PACX-1vRglKoc6L2ExSYRDD9H0exyRChQeDsGi-VXPY9s5_Pel-4HrzWFOA9SXyX4VQKFnNUlOIxRF8EBkW_j/pub?gid=1845008987&single=true&output=csv",
    prestations: "https://docs.google.com/spreadsheets/d/e/2PACX-1vRglKoc6L2ExSYRDD9H0exyRChQeDsGi-VXPY9s5_Pel-4HrzWFOA9SXyX4VQKFnNUlOIxRF8EBkW_j/pub?gid=1742624469&single=true&output=csv"
};

async function updateDisponibilites() {
    const prestation = document.getElementById("prestation").value;
    const date = document.getElementById("date").value;
    const horaireSelect = document.getElementById("horaire");

    horaireSelect.innerHTML = '<option value="">Chargement...</option>';

    if (!prestation || !date) {
        horaireSelect.innerHTML = '<option value="">- S√©lectionner un cr√©neau -</option>';
        return;
    }

    try {
        // Charger toutes les donn√©es en parall√®le
        const [disposCSV, rdvCSV, prestationsCSV] = await Promise.all([
            fetch(csvLinks.disponibilites).then(res => res.text()),
            fetch(csvLinks.rdv).then(res => res.text()),
            fetch(csvLinks.prestations).then(res => res.text())
        ]);

        const disponibilites = parseCSV(disposCSV);
        const rdvs = parseCSV(rdvCSV);
        const prestations = parseCSV(prestationsCSV);

        console.log("Disponibilit√©s charg√©es :", disponibilites);
        console.log("RDVs charg√©s :", rdvs);
        console.log("Prestations charg√©es :", prestations);

        // Trouver la dur√©e de la prestation s√©lectionn√©e (en minutes)
        const prestationData = prestations.find(p => p.prestation.trim().toLowerCase() === prestation.trim().toLowerCase());

        if (!prestationData) {
            console.error("Prestation non trouv√©e :", prestation);
            horaireSelect.innerHTML = '<option value="">Erreur : Prestation inconnue</option>';
            return;
        }

        const dureePrestation = parseInt(prestationData.duree); // D√©j√† en minutes

        // Trouver les disponibilit√©s pour la date s√©lectionn√©e
        const dispoJour = disponibilites.find(d => d.date === date);
        if (!dispoJour) {
            horaireSelect.innerHTML = '<option value="">Aucune disponibilit√© ce jour</option>';
            return;
        }

        const heureDebut = parseTime(dispoJour.heure_d√©but);
        const heureFin = parseTime(dispoJour.heure_fin);

        // Trouver les RDVs existants sur cette date
        const rdvsJour = rdvs.filter(r => r.date === date);
        const rdvIntervals = rdvsJour.map(r => ({
            debut: parseTime(r.heure_d√©but),
            fin: parseTime(r.heure_fin) // On prend l'heure de fin directement
        }));

        // G√©n√©rer les cr√©neaux de 30 minutes
        let creneauxDispo = [];

        for (let heure = heureDebut; heure + dureePrestation <= heureFin; heure += 30) {
            let finCreneau = heure + dureePrestation;

            // V√©rifier si le cr√©neau est libre
            let conflit = rdvIntervals.some(rdv => 
                (heure < rdv.fin && finCreneau > rdv.debut) || // Le cr√©neau chevauche un RDV existant
                (heure >= rdv.debut && heure < rdv.fin) || // Le cr√©neau commence √† l'int√©rieur d'un RDV
                (finCreneau > rdv.debut && finCreneau <= rdv.fin) // Le cr√©neau se termine √† l'int√©rieur d'un RDV
            );

            if (!conflit) {
                creneauxDispo.push(`${formatTime(heure)} - ${formatTime(finCreneau)}`);
            }
        }

        // Affichage des cr√©neaux disponibles
        if (creneauxDispo.length > 0) {
            horaireSelect.innerHTML = creneauxDispo.map(creneau =>
                `<option value="${creneau}">${creneau}</option>`
            ).join('');
        } else {
            horaireSelect.innerHTML = '<option value="">Aucun cr√©neau disponible</option>';
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des cr√©neaux :", error);
        horaireSelect.innerHTML = '<option value="">Erreur de chargement</option>';
    }
}

// Fonction pour parser un CSV en tableau d'objets
function parseCSV(csvText) {
    const rows = csvText.split("\n").map(row => row.split(","));
    const headers = rows.shift().map(header => header.trim().toLowerCase().replace(/\s+/g, "_"));

    return rows.map(row => {
        let obj = {};
        row.forEach((value, index) => {
            obj[headers[index]] = value ? value.trim() : "";
        });
        return obj;
    });
}

// Convertir HH:MM en minutes depuis minuit
function parseTime(hhmm) {
    const [h, m] = hhmm.split(":").map(Number);
    return h * 60 + m;
}

// Convertir minutes en HH:MM
function formatTime(minutes) {
    let h = Math.floor(minutes / 60);
    let m = minutes % 60;
    return `${h.toString().padStart(2, "0")}:${m.toString().padStart(2, "0")}`;
}











document.addEventListener("DOMContentLoaded", function () {
    const dateInput = document.getElementById("date");

    // V√©rifie si Flatpickr est d√©j√† attach√©, sinon l'initialiser
    if (!dateInput._flatpickr) {
        flatpickr(dateInput, {
            dateFormat: "d/m/Y",
            disable: [], // On d√©sactivera les jours plus tard
            locale: "fr"
        });
    }
});

// Fonction pour mettre √† jour les jours disponibles selon la prestation s√©lectionn√©e
async function updateCalendar() {
    const prestation = document.getElementById("prestation").value;
    if (!prestation) return;

    console.log("üìÖ Mise √† jour du calendrier pour la prestation :", prestation);

    try {
        // Charger toutes les donn√©es CSV
        const [disposCSV, rdvCSV, prestationsCSV] = await Promise.all([
            fetch(csvLinks.disponibilites).then(res => res.text()),
            fetch(csvLinks.rdv).then(res => res.text()),
            fetch(csvLinks.prestations).then(res => res.text())
        ]);

        const disponibilites = parseCSV(disposCSV);
        const rdvs = parseCSV(rdvCSV);
        const prestations = parseCSV(prestationsCSV);

        console.log("üìú Disponibilit√©s charg√©es :", disponibilites);
        console.log("üìÖ RDVs charg√©s :", rdvs);
        console.log("üíº Prestations charg√©es :", prestations);

        // Trouver la dur√©e de la prestation s√©lectionn√©e (en minutes)
        const prestationData = prestations.find(p => p.prestation.trim().toLowerCase() === prestation.trim().toLowerCase());
        if (!prestationData) {
            console.error("‚ùå Prestation non trouv√©e :", prestation);
            return;
        }

        const dureePrestation = parseInt(prestationData.duree); // D√©j√† en minutes

        // Liste des jours disponibles en fonction des cr√©neaux et des RDVs existants
        let joursDisponibles = [];

        disponibilites.forEach(dispo => {
            const heureDebut = parseTime(dispo.heure_d√©but);
            const heureFin = parseTime(dispo.heure_fin);

            // Filtrer les RDVs de cette date
            const rdvsJour = rdvs.filter(r => r.date === dispo.date);
            const rdvIntervals = rdvsJour.map(r => ({
                debut: parseTime(r.heure_d√©but),
                fin: parseTime(r.heure_fin)
            }));

            // V√©rifier s'il reste un cr√©neau disponible de la dur√©e demand√©e
            let slotDisponible = false;
            for (let heure = heureDebut; heure + dureePrestation <= heureFin; heure += 30) {
                let finCreneau = heure + dureePrestation;

                // V√©rifier si le cr√©neau est libre
                let conflit = rdvIntervals.some(rdv => 
                    (heure < rdv.fin && finCreneau > rdv.debut) || // Chevauche un RDV existant
                    (heure >= rdv.debut && heure < rdv.fin) || // Commence √† l'int√©rieur d'un RDV
                    (finCreneau > rdv.debut && finCreneau <= rdv.fin) // Termine √† l'int√©rieur d'un RDV
                );

                if (!conflit) {
                    slotDisponible = true;
                    break; // On arr√™te d√®s qu'on trouve un cr√©neau disponible
                }
            }

            if (slotDisponible) {
                joursDisponibles.push(dispo.date);
            }
        });

        console.log("‚úÖ Jours valides pour cette prestation :", joursDisponibles);

        // D√©sactiver les jours o√π il n'y a PAS de cr√©neaux valides dans Flatpickr
        const dateInput = document.getElementById("date");

        // V√©rifie si Flatpickr est bien attach√© avant de l'utiliser
        if (!dateInput._flatpickr) {
            console.error("‚ùå Flatpickr n'est pas initialis√© sur dateInput !");
            return;
        }

        let allDays = [];
        let currentDate = new Date(dateInput._flatpickr.currentYear, dateInput._flatpickr.currentMonth, 1);

        while (currentDate.getMonth() === dateInput._flatpickr.currentMonth) {
            let formattedDate = currentDate.toISOString().split("T")[0]; // Format YYYY-MM-DD
            allDays.push(formattedDate);
            currentDate.setDate(currentDate.getDate() + 1);
        }

        let joursDesactives = allDays.filter(date => !joursDisponibles.includes(date));

        console.log("üö´ Jours d√©sactiv√©s dans Flatpickr :", joursDesactives);

        // Appliquer les jours d√©sactiv√©s dans Flatpickr
        dateInput._flatpickr.set("disable", joursDesactives);
        dateInput._flatpickr.redraw();

    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour du calendrier :", error);
    }
}

// Fonction pour parser un CSV en tableau d'objets
function parseCSV(csvText) {
    const rows = csvText.split("\n").map(row => row.split(","));
    const headers = rows.shift().map(header => header.trim().toLowerCase().replace(/\s+/g, "_"));

    return rows.map(row => {
        let obj = {};
        row.forEach((value, index) => {
            obj[headers[index]] = value ? value.trim() : "";
        });
        return obj;
    });
}

// Convertir HH:MM en minutes depuis minuit
function parseTime(hhmm) {
    if (!hhmm) return 0;
    const [h, m] = hhmm.split(":").map(Number);
    return h * 60 + m;
}

// Convertir minutes en HH:MM
function formatTime(minutes) {
    let h = Math.floor(minutes / 60);
    let m = minutes % 60;
    return `${h.toString().padStart(2, "0")}:${m.toString().padStart(2, "0")}`;
}
